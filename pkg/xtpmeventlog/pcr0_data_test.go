// Copyright 2023 Meta Platforms, Inc. and affiliates.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
package xtpmeventlog

import (
	"encoding/hex"
	"testing"

	"github.com/linuxboot/fiano/pkg/intel/metadata/cbnt"
	"github.com/stretchr/testify/require"
)

func TestParsePCR0DATALog(t *testing.T) {
	type testCaseT struct {
		Name     string
		Sample   string
		Expected PCR0DATALog
	}

	testCases := []testCaseT{
		{
			Name:   "Quanta",
			Sample: "1b00426f6f74204775617264204d6561737572656420532d4352544d00818010000200000003001400000126d6fda800f6984bb3b448ba83d8f8656edf4e69b6677be6fa447d430c3c88285a47fbf646bc8fd7f9cb4f783ab1f94a322aabc623dbfe6afa9ada6ee271a253e654eee1e48b81b09864df2e9ce40449e6f54dccf6ac1db9d6336449f3b585181f0524fa581bb457769e65cec8e8bbe7c07bb98f2d2fbde601064e6dfcc985166861537d805685d991eefba33afea6a71f07ef006e223413ea216e3a175b86dce77aa1081c736a0bfc65984ff6d8553592b3fcd204b544bf23c748db9f2217602b819de94c1e052ac9900f4d4f592cce79fca3f0ad92751603b404a97e7a617fa85d0033d7519e0fe894f147144011bdd17e8b1b33af12eb375e4d833968ec391400000184981c911d87b67f136c6d05c115d8f27bbd4426185d8a26ada821f12d7698519fc2baf34b1262b064a613fad08180ed17ca0d9e05d9eccb3f4dd522dbc763e03f4621c1cbd9e6a58c3427175ae207767dd0a2c0e6445c0c8d05c2b4750ad5f8a2b5fcdeab4c277eeb1ff3d4435e22e83c55c76c8ba63444b6a49b9e2d1572f294169b41397f7d5405b464d3ef55e2e8c7b80a7fb1bb2ab61d861546af1cd3aba27540f37e058a5f4ac90e2fc2b822d539e53291d73bb5c768829e5539b3774a9b11a842b896465698238ab6a4339048dd87f1da0678976a8279199d0f59deea7f00640b881d1709ea3c18e62a6c072d64061fb5a6a45c99e61e597984a7f0ef1400000116c36b53ae6b6f72534d0ad195a97ec959099e2512ae1b26980a487a41c791bc0489741ff1d8ed24c875a730b83a2052c49e48d6ed0fc53b53aa12634eeaf00550a5ce6d5687e574c47926f4f960b1332b62630c04b2331caef92c5dea54c151c007eac124d5f6341f6ee1f4f3fad3799e29666a5fa4ab148a59f791ceab807970e97c33777f13d4c620994ff92b18b49a22d12177c6e1b30a5919d64df1f3b34920b4c87da718a14d0fd868c63e58083547307f27c29c0291c021eca9ffee842775695bef5d3adc50f30e93a2e52f4968ae3baf36c1f290e084723c88912c5c90284e1d1c82458efcca076282f7f84ffc4bbae8b45c823fc85ecaac26b020e4020000000b00041cbb8673c96d040ca786f5916b2e65764a5ddcb6ca3ee722b27bb9dbc59bea00000000000000000000000000000000000000000000000000000000000000000400596db0d098edba059b1932fcf788f39a1d1f70080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000b005018af6c14e8590f157ab0f9737fec9a53c06c1cbaa3776addfc104d34b954ec00000000000000000000000000000000000000000000000000000000000000000400f2068f8b6dd765ce623608c536ad61af4b9cb61d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			Expected: PCR0DATALog{
				Description:       "Boot Guard Measured S-CRTM\x00",
				ACM_POLICY_STATUS: 0x200108081,
				ACMHeaderSVN:      0x3,
				ACMSignatureAlgo:  0x14,
				ACMSignature:      []uint8{0x26, 0xd6, 0xfd, 0xa8, 0x0, 0xf6, 0x98, 0x4b, 0xb3, 0xb4, 0x48, 0xba, 0x83, 0xd8, 0xf8, 0x65, 0x6e, 0xdf, 0x4e, 0x69, 0xb6, 0x67, 0x7b, 0xe6, 0xfa, 0x44, 0x7d, 0x43, 0xc, 0x3c, 0x88, 0x28, 0x5a, 0x47, 0xfb, 0xf6, 0x46, 0xbc, 0x8f, 0xd7, 0xf9, 0xcb, 0x4f, 0x78, 0x3a, 0xb1, 0xf9, 0x4a, 0x32, 0x2a, 0xab, 0xc6, 0x23, 0xdb, 0xfe, 0x6a, 0xfa, 0x9a, 0xda, 0x6e, 0xe2, 0x71, 0xa2, 0x53, 0xe6, 0x54, 0xee, 0xe1, 0xe4, 0x8b, 0x81, 0xb0, 0x98, 0x64, 0xdf, 0x2e, 0x9c, 0xe4, 0x4, 0x49, 0xe6, 0xf5, 0x4d, 0xcc, 0xf6, 0xac, 0x1d, 0xb9, 0xd6, 0x33, 0x64, 0x49, 0xf3, 0xb5, 0x85, 0x18, 0x1f, 0x5, 0x24, 0xfa, 0x58, 0x1b, 0xb4, 0x57, 0x76, 0x9e, 0x65, 0xce, 0xc8, 0xe8, 0xbb, 0xe7, 0xc0, 0x7b, 0xb9, 0x8f, 0x2d, 0x2f, 0xbd, 0xe6, 0x1, 0x6, 0x4e, 0x6d, 0xfc, 0xc9, 0x85, 0x16, 0x68, 0x61, 0x53, 0x7d, 0x80, 0x56, 0x85, 0xd9, 0x91, 0xee, 0xfb, 0xa3, 0x3a, 0xfe, 0xa6, 0xa7, 0x1f, 0x7, 0xef, 0x0, 0x6e, 0x22, 0x34, 0x13, 0xea, 0x21, 0x6e, 0x3a, 0x17, 0x5b, 0x86, 0xdc, 0xe7, 0x7a, 0xa1, 0x8, 0x1c, 0x73, 0x6a, 0xb, 0xfc, 0x65, 0x98, 0x4f, 0xf6, 0xd8, 0x55, 0x35, 0x92, 0xb3, 0xfc, 0xd2, 0x4, 0xb5, 0x44, 0xbf, 0x23, 0xc7, 0x48, 0xdb, 0x9f, 0x22, 0x17, 0x60, 0x2b, 0x81, 0x9d, 0xe9, 0x4c, 0x1e, 0x5, 0x2a, 0xc9, 0x90, 0xf, 0x4d, 0x4f, 0x59, 0x2c, 0xce, 0x79, 0xfc, 0xa3, 0xf0, 0xad, 0x92, 0x75, 0x16, 0x3, 0xb4, 0x4, 0xa9, 0x7e, 0x7a, 0x61, 0x7f, 0xa8, 0x5d, 0x0, 0x33, 0xd7, 0x51, 0x9e, 0xf, 0xe8, 0x94, 0xf1, 0x47, 0x14, 0x40, 0x11, 0xbd, 0xd1, 0x7e, 0x8b, 0x1b, 0x33, 0xaf, 0x12, 0xeb, 0x37, 0x5e, 0x4d, 0x83, 0x39, 0x68, 0xec, 0x39},
				KMSignatureAlgo:   0x14,
				KMSignature:       []uint8{0x84, 0x98, 0x1c, 0x91, 0x1d, 0x87, 0xb6, 0x7f, 0x13, 0x6c, 0x6d, 0x5, 0xc1, 0x15, 0xd8, 0xf2, 0x7b, 0xbd, 0x44, 0x26, 0x18, 0x5d, 0x8a, 0x26, 0xad, 0xa8, 0x21, 0xf1, 0x2d, 0x76, 0x98, 0x51, 0x9f, 0xc2, 0xba, 0xf3, 0x4b, 0x12, 0x62, 0xb0, 0x64, 0xa6, 0x13, 0xfa, 0xd0, 0x81, 0x80, 0xed, 0x17, 0xca, 0xd, 0x9e, 0x5, 0xd9, 0xec, 0xcb, 0x3f, 0x4d, 0xd5, 0x22, 0xdb, 0xc7, 0x63, 0xe0, 0x3f, 0x46, 0x21, 0xc1, 0xcb, 0xd9, 0xe6, 0xa5, 0x8c, 0x34, 0x27, 0x17, 0x5a, 0xe2, 0x7, 0x76, 0x7d, 0xd0, 0xa2, 0xc0, 0xe6, 0x44, 0x5c, 0xc, 0x8d, 0x5, 0xc2, 0xb4, 0x75, 0xa, 0xd5, 0xf8, 0xa2, 0xb5, 0xfc, 0xde, 0xab, 0x4c, 0x27, 0x7e, 0xeb, 0x1f, 0xf3, 0xd4, 0x43, 0x5e, 0x22, 0xe8, 0x3c, 0x55, 0xc7, 0x6c, 0x8b, 0xa6, 0x34, 0x44, 0xb6, 0xa4, 0x9b, 0x9e, 0x2d, 0x15, 0x72, 0xf2, 0x94, 0x16, 0x9b, 0x41, 0x39, 0x7f, 0x7d, 0x54, 0x5, 0xb4, 0x64, 0xd3, 0xef, 0x55, 0xe2, 0xe8, 0xc7, 0xb8, 0xa, 0x7f, 0xb1, 0xbb, 0x2a, 0xb6, 0x1d, 0x86, 0x15, 0x46, 0xaf, 0x1c, 0xd3, 0xab, 0xa2, 0x75, 0x40, 0xf3, 0x7e, 0x5, 0x8a, 0x5f, 0x4a, 0xc9, 0xe, 0x2f, 0xc2, 0xb8, 0x22, 0xd5, 0x39, 0xe5, 0x32, 0x91, 0xd7, 0x3b, 0xb5, 0xc7, 0x68, 0x82, 0x9e, 0x55, 0x39, 0xb3, 0x77, 0x4a, 0x9b, 0x11, 0xa8, 0x42, 0xb8, 0x96, 0x46, 0x56, 0x98, 0x23, 0x8a, 0xb6, 0xa4, 0x33, 0x90, 0x48, 0xdd, 0x87, 0xf1, 0xda, 0x6, 0x78, 0x97, 0x6a, 0x82, 0x79, 0x19, 0x9d, 0xf, 0x59, 0xde, 0xea, 0x7f, 0x0, 0x64, 0xb, 0x88, 0x1d, 0x17, 0x9, 0xea, 0x3c, 0x18, 0xe6, 0x2a, 0x6c, 0x7, 0x2d, 0x64, 0x6, 0x1f, 0xb5, 0xa6, 0xa4, 0x5c, 0x99, 0xe6, 0x1e, 0x59, 0x79, 0x84, 0xa7, 0xf0, 0xef},
				BPMSignatureAlgo:  0x14,
				BPMSignature:      []uint8{0x16, 0xc3, 0x6b, 0x53, 0xae, 0x6b, 0x6f, 0x72, 0x53, 0x4d, 0xa, 0xd1, 0x95, 0xa9, 0x7e, 0xc9, 0x59, 0x9, 0x9e, 0x25, 0x12, 0xae, 0x1b, 0x26, 0x98, 0xa, 0x48, 0x7a, 0x41, 0xc7, 0x91, 0xbc, 0x4, 0x89, 0x74, 0x1f, 0xf1, 0xd8, 0xed, 0x24, 0xc8, 0x75, 0xa7, 0x30, 0xb8, 0x3a, 0x20, 0x52, 0xc4, 0x9e, 0x48, 0xd6, 0xed, 0xf, 0xc5, 0x3b, 0x53, 0xaa, 0x12, 0x63, 0x4e, 0xea, 0xf0, 0x5, 0x50, 0xa5, 0xce, 0x6d, 0x56, 0x87, 0xe5, 0x74, 0xc4, 0x79, 0x26, 0xf4, 0xf9, 0x60, 0xb1, 0x33, 0x2b, 0x62, 0x63, 0xc, 0x4, 0xb2, 0x33, 0x1c, 0xae, 0xf9, 0x2c, 0x5d, 0xea, 0x54, 0xc1, 0x51, 0xc0, 0x7, 0xea, 0xc1, 0x24, 0xd5, 0xf6, 0x34, 0x1f, 0x6e, 0xe1, 0xf4, 0xf3, 0xfa, 0xd3, 0x79, 0x9e, 0x29, 0x66, 0x6a, 0x5f, 0xa4, 0xab, 0x14, 0x8a, 0x59, 0xf7, 0x91, 0xce, 0xab, 0x80, 0x79, 0x70, 0xe9, 0x7c, 0x33, 0x77, 0x7f, 0x13, 0xd4, 0xc6, 0x20, 0x99, 0x4f, 0xf9, 0x2b, 0x18, 0xb4, 0x9a, 0x22, 0xd1, 0x21, 0x77, 0xc6, 0xe1, 0xb3, 0xa, 0x59, 0x19, 0xd6, 0x4d, 0xf1, 0xf3, 0xb3, 0x49, 0x20, 0xb4, 0xc8, 0x7d, 0xa7, 0x18, 0xa1, 0x4d, 0xf, 0xd8, 0x68, 0xc6, 0x3e, 0x58, 0x8, 0x35, 0x47, 0x30, 0x7f, 0x27, 0xc2, 0x9c, 0x2, 0x91, 0xc0, 0x21, 0xec, 0xa9, 0xff, 0xee, 0x84, 0x27, 0x75, 0x69, 0x5b, 0xef, 0x5d, 0x3a, 0xdc, 0x50, 0xf3, 0xe, 0x93, 0xa2, 0xe5, 0x2f, 0x49, 0x68, 0xae, 0x3b, 0xaf, 0x36, 0xc1, 0xf2, 0x90, 0xe0, 0x84, 0x72, 0x3c, 0x88, 0x91, 0x2c, 0x5c, 0x90, 0x28, 0x4e, 0x1d, 0x1c, 0x82, 0x45, 0x8e, 0xfc, 0xca, 0x7, 0x62, 0x82, 0xf7, 0xf8, 0x4f, 0xfc, 0x4b, 0xba, 0xe8, 0xb4, 0x5c, 0x82, 0x3f, 0xc8, 0x5e, 0xca, 0xac, 0x26, 0xb0, 0x20, 0xe4},
				IBBDigests: TPML_DIGEST_VALUES{Digests: []TPMT_HA{
					{
						HashAlg: 0xb,
						Digest:  TPMU_HA{Digest: []uint8{0x4, 0x1c, 0xbb, 0x86, 0x73, 0xc9, 0x6d, 0x4, 0xc, 0xa7, 0x86, 0xf5, 0x91, 0x6b, 0x2e, 0x65, 0x76, 0x4a, 0x5d, 0xdc, 0xb6, 0xca, 0x3e, 0xe7, 0x22, 0xb2, 0x7b, 0xb9, 0xdb, 0xc5, 0x9b, 0xea}},
					}, {
						HashAlg: 0x4,
						Digest:  TPMU_HA{Digest: []uint8{0x59, 0x6d, 0xb0, 0xd0, 0x98, 0xed, 0xba, 0x5, 0x9b, 0x19, 0x32, 0xfc, 0xf7, 0x88, 0xf3, 0x9a, 0x1d, 0x1f, 0x70, 0x8}},
					},
				}},
				OriginalPCR0: TPML_DIGEST_VALUES{Digests: []TPMT_HA{
					{
						HashAlg: 0xb,
						Digest:  TPMU_HA{Digest: []uint8{0x50, 0x18, 0xaf, 0x6c, 0x14, 0xe8, 0x59, 0xf, 0x15, 0x7a, 0xb0, 0xf9, 0x73, 0x7f, 0xec, 0x9a, 0x53, 0xc0, 0x6c, 0x1c, 0xba, 0xa3, 0x77, 0x6a, 0xdd, 0xfc, 0x10, 0x4d, 0x34, 0xb9, 0x54, 0xec}},
					}, {
						HashAlg: 0x4,
						Digest:  TPMU_HA{Digest: []uint8{0xf2, 0x6, 0x8f, 0x8b, 0x6d, 0xd7, 0x65, 0xce, 0x62, 0x36, 0x8, 0xc5, 0x36, 0xad, 0x61, 0xaf, 0x4b, 0x9c, 0xb6, 0x1d}},
					},
				}},
			},
		},
		{
			Name:   "Wiwynn",
			Sample: "1b00426f6f74204775617264204d6561737572656420532d4352544d0081c4100000000000040014000001588ff4fba087febef5d10e74e7600c60924a852a9a8069b5ae3d05ec5417cdd42aeb53211dcf1a52965c140a6e26102beaf79664e61254a37e59c5711d6e9e1dbc4c666deb98f9d42561f8bf4bbc0570f5be399356489a54f1afc8f196c8d32d192669687d2501ad07204877a897e8d7300a345fb850df705ad72115d951f2aa49dbf4848eb42f0b7ea39e534429fae305d561cf68a29295ad28af8f03ca48d019fc28123fe76fba64e4f63d7bd7c3807f28d1b2034a11ba8858b1b09b094414aa61289f3f7bc078f54fc2066dce8793ab1b27438e504d83b3c354156734c1b0a1ac463a037159f165531138fea1a04501bd7ea147c68995ec37d5179a1a2136140000018ac7a26e8b599bda7ae83bb5e5ca1d0b58ec4b42439290bb51f953f744c900994c6495d1d52d2262b497d6923e59342e13e9c46effd386bc25a3f59e64df87c6bb5fb89564da2e07e66df254df28a9a4fc8d3c741fa79dfd2cc5b7135bf8083e0b7f7c6e5dbecca538fcbb3b34e0b7cca75b3a1e4ea341218da5340213a58e36fda8ecc55d9f2a2c2300a3e631a5463b24e316392bd8fc01a3608fa231ae8375cb70887ce10562e4ec0997061d3f6a96271f6475505808c309e6533f599a731fff6ea7cc99dbda633073551807840cecc8c4cbbd8d1ba0c69a2eee0799c96d3d1ddbbc8ac4c39660a43948b41f317a5448e8f1b335dcf009f20ee2f57bb4624f140000014a4ca9df38fb7efb7fd2f1a9b8ac0b682397006e0201975a15170f5661a352e0718217865c589e4864e5e928183efb06032520c641d619c892f24638ee09754c4819a1d806355c30c4bf3eb91f9d9e1a5d893aba56e16ea3e0d3d5ef944724a4df2c61ff4ac1a729616ebe526e2c489cd39c6bd125a00ccd313e980650d2adafee2569f41b4242e9d2a6c8d0cad066bbdf9bbacf6c67c7e4ecc03bf4eb4fb5df56f6300360b939567fa90592776ad93db534712de06131dd0303c4e8b1ad803ea9795fbc43b799e75d26af308acca170c9354a0404321032d6e3d82a830d4c3a2373397a4991d92c8d48c13fe2efb10cfc77198763fff6c39d1ba238cf2d9988040000000b00e71438fe545045bb05bc36aaf520ffbbf1cc85d07d333518d428c6ca7a3abe3800000000000000000000000000000000000000000000000000000000000000000400dc1c40453469d5d0be0b832ac2e4f0bf4b55f4a300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0092be08d65e715ac6d83f629104531f049b973d138cdc6bd6b43b168585b5cea2d63e9af55f88dbc732e57aae085a25e7000000000000000000000000000000001200ebe3e092993180d453e350a2f19ece4d9277e0e8366850d3c32a776fc01c36660000000000000000000000000000000000000000000000000000000000000000020000000400a74d108a71499ef58be0a7007b265db75d7a344200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b00b1848884166881e9a9f5fe2da23bae120bce60d0968f0fd586d407512596052d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			Expected: PCR0DATALog{
				Description:       "Boot Guard Measured S-CRTM\x00",
				ACM_POLICY_STATUS: 0x10c481,
				ACMHeaderSVN:      0x4,
				ACMSignatureAlgo:  cbnt.AlgRSASSA,
				ACMSignature:      []uint8{0x58, 0x8f, 0xf4, 0xfb, 0xa0, 0x87, 0xfe, 0xbe, 0xf5, 0xd1, 0xe, 0x74, 0xe7, 0x60, 0xc, 0x60, 0x92, 0x4a, 0x85, 0x2a, 0x9a, 0x80, 0x69, 0xb5, 0xae, 0x3d, 0x5, 0xec, 0x54, 0x17, 0xcd, 0xd4, 0x2a, 0xeb, 0x53, 0x21, 0x1d, 0xcf, 0x1a, 0x52, 0x96, 0x5c, 0x14, 0xa, 0x6e, 0x26, 0x10, 0x2b, 0xea, 0xf7, 0x96, 0x64, 0xe6, 0x12, 0x54, 0xa3, 0x7e, 0x59, 0xc5, 0x71, 0x1d, 0x6e, 0x9e, 0x1d, 0xbc, 0x4c, 0x66, 0x6d, 0xeb, 0x98, 0xf9, 0xd4, 0x25, 0x61, 0xf8, 0xbf, 0x4b, 0xbc, 0x5, 0x70, 0xf5, 0xbe, 0x39, 0x93, 0x56, 0x48, 0x9a, 0x54, 0xf1, 0xaf, 0xc8, 0xf1, 0x96, 0xc8, 0xd3, 0x2d, 0x19, 0x26, 0x69, 0x68, 0x7d, 0x25, 0x1, 0xad, 0x7, 0x20, 0x48, 0x77, 0xa8, 0x97, 0xe8, 0xd7, 0x30, 0xa, 0x34, 0x5f, 0xb8, 0x50, 0xdf, 0x70, 0x5a, 0xd7, 0x21, 0x15, 0xd9, 0x51, 0xf2, 0xaa, 0x49, 0xdb, 0xf4, 0x84, 0x8e, 0xb4, 0x2f, 0xb, 0x7e, 0xa3, 0x9e, 0x53, 0x44, 0x29, 0xfa, 0xe3, 0x5, 0xd5, 0x61, 0xcf, 0x68, 0xa2, 0x92, 0x95, 0xad, 0x28, 0xaf, 0x8f, 0x3, 0xca, 0x48, 0xd0, 0x19, 0xfc, 0x28, 0x12, 0x3f, 0xe7, 0x6f, 0xba, 0x64, 0xe4, 0xf6, 0x3d, 0x7b, 0xd7, 0xc3, 0x80, 0x7f, 0x28, 0xd1, 0xb2, 0x3, 0x4a, 0x11, 0xba, 0x88, 0x58, 0xb1, 0xb0, 0x9b, 0x9, 0x44, 0x14, 0xaa, 0x61, 0x28, 0x9f, 0x3f, 0x7b, 0xc0, 0x78, 0xf5, 0x4f, 0xc2, 0x6, 0x6d, 0xce, 0x87, 0x93, 0xab, 0x1b, 0x27, 0x43, 0x8e, 0x50, 0x4d, 0x83, 0xb3, 0xc3, 0x54, 0x15, 0x67, 0x34, 0xc1, 0xb0, 0xa1, 0xac, 0x46, 0x3a, 0x3, 0x71, 0x59, 0xf1, 0x65, 0x53, 0x11, 0x38, 0xfe, 0xa1, 0xa0, 0x45, 0x1, 0xbd, 0x7e, 0xa1, 0x47, 0xc6, 0x89, 0x95, 0xec, 0x37, 0xd5, 0x17, 0x9a, 0x1a, 0x21, 0x36},
				KMSignatureAlgo:   cbnt.AlgRSASSA,
				KMSignature:       []uint8{0x8a, 0xc7, 0xa2, 0x6e, 0x8b, 0x59, 0x9b, 0xda, 0x7a, 0xe8, 0x3b, 0xb5, 0xe5, 0xca, 0x1d, 0xb, 0x58, 0xec, 0x4b, 0x42, 0x43, 0x92, 0x90, 0xbb, 0x51, 0xf9, 0x53, 0xf7, 0x44, 0xc9, 0x0, 0x99, 0x4c, 0x64, 0x95, 0xd1, 0xd5, 0x2d, 0x22, 0x62, 0xb4, 0x97, 0xd6, 0x92, 0x3e, 0x59, 0x34, 0x2e, 0x13, 0xe9, 0xc4, 0x6e, 0xff, 0xd3, 0x86, 0xbc, 0x25, 0xa3, 0xf5, 0x9e, 0x64, 0xdf, 0x87, 0xc6, 0xbb, 0x5f, 0xb8, 0x95, 0x64, 0xda, 0x2e, 0x7, 0xe6, 0x6d, 0xf2, 0x54, 0xdf, 0x28, 0xa9, 0xa4, 0xfc, 0x8d, 0x3c, 0x74, 0x1f, 0xa7, 0x9d, 0xfd, 0x2c, 0xc5, 0xb7, 0x13, 0x5b, 0xf8, 0x8, 0x3e, 0xb, 0x7f, 0x7c, 0x6e, 0x5d, 0xbe, 0xcc, 0xa5, 0x38, 0xfc, 0xbb, 0x3b, 0x34, 0xe0, 0xb7, 0xcc, 0xa7, 0x5b, 0x3a, 0x1e, 0x4e, 0xa3, 0x41, 0x21, 0x8d, 0xa5, 0x34, 0x2, 0x13, 0xa5, 0x8e, 0x36, 0xfd, 0xa8, 0xec, 0xc5, 0x5d, 0x9f, 0x2a, 0x2c, 0x23, 0x0, 0xa3, 0xe6, 0x31, 0xa5, 0x46, 0x3b, 0x24, 0xe3, 0x16, 0x39, 0x2b, 0xd8, 0xfc, 0x1, 0xa3, 0x60, 0x8f, 0xa2, 0x31, 0xae, 0x83, 0x75, 0xcb, 0x70, 0x88, 0x7c, 0xe1, 0x5, 0x62, 0xe4, 0xec, 0x9, 0x97, 0x6, 0x1d, 0x3f, 0x6a, 0x96, 0x27, 0x1f, 0x64, 0x75, 0x50, 0x58, 0x8, 0xc3, 0x9, 0xe6, 0x53, 0x3f, 0x59, 0x9a, 0x73, 0x1f, 0xff, 0x6e, 0xa7, 0xcc, 0x99, 0xdb, 0xda, 0x63, 0x30, 0x73, 0x55, 0x18, 0x7, 0x84, 0xc, 0xec, 0xc8, 0xc4, 0xcb, 0xbd, 0x8d, 0x1b, 0xa0, 0xc6, 0x9a, 0x2e, 0xee, 0x7, 0x99, 0xc9, 0x6d, 0x3d, 0x1d, 0xdb, 0xbc, 0x8a, 0xc4, 0xc3, 0x96, 0x60, 0xa4, 0x39, 0x48, 0xb4, 0x1f, 0x31, 0x7a, 0x54, 0x48, 0xe8, 0xf1, 0xb3, 0x35, 0xdc, 0xf0, 0x9, 0xf2, 0xe, 0xe2, 0xf5, 0x7b, 0xb4, 0x62, 0x4f},
				BPMSignatureAlgo:  cbnt.AlgRSASSA,
				BPMSignature:      []uint8{0x4a, 0x4c, 0xa9, 0xdf, 0x38, 0xfb, 0x7e, 0xfb, 0x7f, 0xd2, 0xf1, 0xa9, 0xb8, 0xac, 0xb, 0x68, 0x23, 0x97, 0x0, 0x6e, 0x2, 0x1, 0x97, 0x5a, 0x15, 0x17, 0xf, 0x56, 0x61, 0xa3, 0x52, 0xe0, 0x71, 0x82, 0x17, 0x86, 0x5c, 0x58, 0x9e, 0x48, 0x64, 0xe5, 0xe9, 0x28, 0x18, 0x3e, 0xfb, 0x6, 0x3, 0x25, 0x20, 0xc6, 0x41, 0xd6, 0x19, 0xc8, 0x92, 0xf2, 0x46, 0x38, 0xee, 0x9, 0x75, 0x4c, 0x48, 0x19, 0xa1, 0xd8, 0x6, 0x35, 0x5c, 0x30, 0xc4, 0xbf, 0x3e, 0xb9, 0x1f, 0x9d, 0x9e, 0x1a, 0x5d, 0x89, 0x3a, 0xba, 0x56, 0xe1, 0x6e, 0xa3, 0xe0, 0xd3, 0xd5, 0xef, 0x94, 0x47, 0x24, 0xa4, 0xdf, 0x2c, 0x61, 0xff, 0x4a, 0xc1, 0xa7, 0x29, 0x61, 0x6e, 0xbe, 0x52, 0x6e, 0x2c, 0x48, 0x9c, 0xd3, 0x9c, 0x6b, 0xd1, 0x25, 0xa0, 0xc, 0xcd, 0x31, 0x3e, 0x98, 0x6, 0x50, 0xd2, 0xad, 0xaf, 0xee, 0x25, 0x69, 0xf4, 0x1b, 0x42, 0x42, 0xe9, 0xd2, 0xa6, 0xc8, 0xd0, 0xca, 0xd0, 0x66, 0xbb, 0xdf, 0x9b, 0xba, 0xcf, 0x6c, 0x67, 0xc7, 0xe4, 0xec, 0xc0, 0x3b, 0xf4, 0xeb, 0x4f, 0xb5, 0xdf, 0x56, 0xf6, 0x30, 0x3, 0x60, 0xb9, 0x39, 0x56, 0x7f, 0xa9, 0x5, 0x92, 0x77, 0x6a, 0xd9, 0x3d, 0xb5, 0x34, 0x71, 0x2d, 0xe0, 0x61, 0x31, 0xdd, 0x3, 0x3, 0xc4, 0xe8, 0xb1, 0xad, 0x80, 0x3e, 0xa9, 0x79, 0x5f, 0xbc, 0x43, 0xb7, 0x99, 0xe7, 0x5d, 0x26, 0xaf, 0x30, 0x8a, 0xcc, 0xa1, 0x70, 0xc9, 0x35, 0x4a, 0x4, 0x4, 0x32, 0x10, 0x32, 0xd6, 0xe3, 0xd8, 0x2a, 0x83, 0xd, 0x4c, 0x3a, 0x23, 0x73, 0x39, 0x7a, 0x49, 0x91, 0xd9, 0x2c, 0x8d, 0x48, 0xc1, 0x3f, 0xe2, 0xef, 0xb1, 0xc, 0xfc, 0x77, 0x19, 0x87, 0x63, 0xff, 0xf6, 0xc3, 0x9d, 0x1b, 0xa2, 0x38, 0xcf, 0x2d, 0x99, 0x88},
				IBBDigests: TPML_DIGEST_VALUES{Digests: []TPMT_HA{
					{
						HashAlg: cbnt.AlgSHA256,
						Digest:  TPMU_HA{Digest: []uint8{0xe7, 0x14, 0x38, 0xfe, 0x54, 0x50, 0x45, 0xbb, 0x5, 0xbc, 0x36, 0xaa, 0xf5, 0x20, 0xff, 0xbb, 0xf1, 0xcc, 0x85, 0xd0, 0x7d, 0x33, 0x35, 0x18, 0xd4, 0x28, 0xc6, 0xca, 0x7a, 0x3a, 0xbe, 0x38}},
					},
					{
						HashAlg: cbnt.AlgSHA1,
						Digest:  TPMU_HA{Digest: []uint8{0xdc, 0x1c, 0x40, 0x45, 0x34, 0x69, 0xd5, 0xd0, 0xbe, 0xb, 0x83, 0x2a, 0xc2, 0xe4, 0xf0, 0xbf, 0x4b, 0x55, 0xf4, 0xa3}},
					},
					{
						HashAlg: cbnt.AlgSHA384,
						Digest:  TPMU_HA{Digest: []uint8{0x92, 0xbe, 0x8, 0xd6, 0x5e, 0x71, 0x5a, 0xc6, 0xd8, 0x3f, 0x62, 0x91, 0x4, 0x53, 0x1f, 0x4, 0x9b, 0x97, 0x3d, 0x13, 0x8c, 0xdc, 0x6b, 0xd6, 0xb4, 0x3b, 0x16, 0x85, 0x85, 0xb5, 0xce, 0xa2, 0xd6, 0x3e, 0x9a, 0xf5, 0x5f, 0x88, 0xdb, 0xc7, 0x32, 0xe5, 0x7a, 0xae, 0x8, 0x5a, 0x25, 0xe7}},
					},
					{
						HashAlg: cbnt.AlgSM3,
						Digest:  TPMU_HA{Digest: []uint8{0xeb, 0xe3, 0xe0, 0x92, 0x99, 0x31, 0x80, 0xd4, 0x53, 0xe3, 0x50, 0xa2, 0xf1, 0x9e, 0xce, 0x4d, 0x92, 0x77, 0xe0, 0xe8, 0x36, 0x68, 0x50, 0xd3, 0xc3, 0x2a, 0x77, 0x6f, 0xc0, 0x1c, 0x36, 0x66}},
					},
				}},
				OriginalPCR0: TPML_DIGEST_VALUES{Digests: []TPMT_HA{
					{
						HashAlg: cbnt.AlgSHA1,
						Digest:  TPMU_HA{Digest: []uint8{0xa7, 0x4d, 0x10, 0x8a, 0x71, 0x49, 0x9e, 0xf5, 0x8b, 0xe0, 0xa7, 0x0, 0x7b, 0x26, 0x5d, 0xb7, 0x5d, 0x7a, 0x34, 0x42}},
					},
					{
						HashAlg: cbnt.AlgSHA256,
						Digest:  TPMU_HA{Digest: []uint8{0xb1, 0x84, 0x88, 0x84, 0x16, 0x68, 0x81, 0xe9, 0xa9, 0xf5, 0xfe, 0x2d, 0xa2, 0x3b, 0xae, 0x12, 0xb, 0xce, 0x60, 0xd0, 0x96, 0x8f, 0xf, 0xd5, 0x86, 0xd4, 0x7, 0x51, 0x25, 0x96, 0x5, 0x2d}},
					}},
				},
			},
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.Name, func(t *testing.T) {
			eventDataSample, err := hex.DecodeString(testCase.Sample)
			require.NoError(t, err)

			result, err := ParsePCR0DATALog(eventDataSample)
			require.NoError(t, err)

			require.Equal(t, testCase.Expected, *result)

			// just a sanity check of the unit-test itself:
			t.Run("internal-unit-test-sanity-check", func(t *testing.T) {
				var digests []TPMT_HA
				digests = append(digests, testCase.Expected.IBBDigests.Digests...)
				digests = append(digests, testCase.Expected.OriginalPCR0.Digests...)
				for _, digest := range digests {
					h, err := digest.HashAlg.Hash()
					require.NoError(t, err)
					require.Equal(t, h.Size(), len(digest.Digest.Digest))
				}
			})
		})
	}
}
